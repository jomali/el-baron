
!!==============================================================================
!!
!!	EL BARÓN
!!	Objeto con rutinas de utilidad
!!
!!==============================================================================
!!
!!	Archivo:			baronUtils.inf
!!	Autor(es):		Victor Gijsbers
!!								J. Francisco Martín <jfm.lisaso@gmail.com>
!!	Idioma:				ES (Español)
!!	Sistema:			Inform-INFSP 6
!!	Plataforma:		Glulx-Vorple
!!	Versión:			0.1
!!	Fecha:				2025/05/17
!!
!!------------------------------------------------------------------------------
!!
!!	Este archivo forma parte de la ficción interactiva EL BARÓN.
!!
!!	EL BARÓN es software libre: usted puede redistribuirlo y/o modificarlo bajo 
!!	los términos de la Licencia Pública General GNU publicada por la Fundación 
!!	para el Software Libre, ya sea la versión 3 de la Licencia, o (a su 
!!	elección) cualquier versión posterior.
!!
!!	EL BARÓN se distribuye con la esperanza de que sea útil, pero SIN GARANTÍA 
!!	ALGUNA; ni siquiera la garantía implícita MERCANTIL o de APTITUD PARA UN 
!!	PROPÓSITO DETERMINADO. Consulte los detalles de la Licencia Pública General 
!!	GNU para más información.
!!
!!	Debería haber recibido una copia de la Licencia Pública General GNU junto a 
!!	EL BARÓN. En caso contrario, consulte <http://www.gnu.org/licenses/>.
!!
!!	Copyright (c) 2006, Victor Gijsbers
!!	Copyright (c) 2019-2025, J. Francisco Martín
!!
!!------------------------------------------------------------------------------
!!
!!	Interfaz del objeto `Utils`:
!!
!!	- center_align_end
!!	- center_align_start
!!	- clear_hyperlinks
!!	- clear_window
!!	- enable_audio
!!	- get_grammatical_inflection
!!	- get_text_style
!!	- is_audio_enabled
!!	- print_horizontal_rule
!!	- reset_highlights
!!	- set_grammatical_inflection
!!	- set_text_style

!!	- check_object_capacity
!!	- create_vorple_hiperlink
!!	- get_highlight_style
!!	- get_hyperlinks_status
!!	- get_top_holder
!!	- initialize_glulx
!!	- is_compass_enabled
!!	- print_spanish_nominative_pronoun
!!	- read_configuration_file
!!	- restart
!!	- set_compass_mode
!!	- set_highlight_style
!!	- set_hyperlinks_status
!!	- start_scene
!!	- website_hyperlink
!!
!!------------------------------------------------------------------------------

Array _hyperlinks_utility_array_a buffer LEN_HUGEHUGESTR;

Global _tempDestination = 0;

Object Utils
	with

		!!--------------------------------------------------------------------------
		!! Cierra nodo para alinear texto en el centro.
		!! IMPORTANTE: Se debe utilizar siempre junto con `center_align_start`.
		!!
		!!	@returns {boolean} Verdadero
		!!	@dependency ifjs.css
		!!	@dependency vorple.h
		!!	@version 2025/05/17
		!!--------------------------------------------------------------------------
		center_align_end [;
			VorpleCloseHTMLTag();
			return true;
		],

		!!--------------------------------------------------------------------------
		!! Abre nodo para alinear texto en el centro.
		!! IMPORTANTE: Se debe utilizar siempre junto con `center_align_end`.
		!!
		!!	@returns {boolean} Verdadero
		!!	@dependency ifjs.css
		!!	@dependency vorple.h
		!!	@version 2025/05/17
		!!--------------------------------------------------------------------------
		center_align_start [;
			VorpleOpenHTMLTag("div", "center-aligned-text");
			return true;
		],

		!!--------------------------------------------------------------------------
		!! Si es compilación para Vorple, deshabilita todos los hipervínculos 
		!! impresos hasta el momento.
		!!
		!!	@returns {boolean} Verdadero
		!!	@dependency ifjs.js
		!!	@dependency vorple.h
		!!	@version 2025/05/18
		!!--------------------------------------------------------------------------
		clear_hyperlinks [;
			VorpleExecuteJavaScriptCommand(BuildCommand("
				ifjs.clearHyperlinks();
			"));
			return true;
		],

		!!--------------------------------------------------------------------------
		!! Elimina los contenidos de todas las ventanas de la interfaz.
		!!
		!!	@returns {boolean} Verdadero
		!!	@dependency ifjs.js
		!!	@dependency vorple.h
		!!	@version 2025/05/18
		!!--------------------------------------------------------------------------
		clear_window [;
			VorpleExecuteJavaScriptCommand(BuildCommand("
				ifjs.clearScreen();
			"));
			return true;
		],

		!!--------------------------------------------------------------------------
		!! Habilita o deshabilita la reproducción de audio.
		!!
		!!	@returns {boolean} Verdadero
		!!	@dependency ifjs.js
		!!	@dependency vorple.h
		!!	@version 2025/05/18
		!!--------------------------------------------------------------------------
		enable_audio [;
			!! TODO
			return true;
		],

		!!----------------------------------------------------------------------
		!! Retorna el código numérico de la flexión gramatical actual utilizada
		!! por la obra, tal y como se definen en la extensión 'SpanishLM.h':
		!!
		!!	1)	Presente, primera persona
		!!	2)	Presente, segunda persona. (Valor por defecto).
		!!	3)	Presente, tercera persona
		!!	4)	Pasado, primera persona
		!!	5)	Pasado, segunda persona
		!!	6)	Pasado, tercera persona
		!!	7)	Futuro, primera persona
		!!	8)	Futuro, segunda persona
		!!	9)	Futuro, tercera persona
		!!
		!!	@returns {integer} Código numérico de la flexión gramatical actual
		!!	@dependency SpanishLM.h
		!!	@version 2025/05/18
		!!----------------------------------------------------------------------
		get_grammatical_inflection [;
			return _grammatical_inflection;
		],

		!!----------------------------------------------------------------------
		!! Retorna el código numérico del estilo de texto utilizado actualmente
		!! por la obra, tal y como se definen en la extensión 'textStyle.h':
		!!
		!!	1) recto
		!!	2) enfático
		!!	3) importante
		!!	4) monoespaciado
		!!	5) encabezado
		!!	6) nota
		!!	7) cita
		!!	8) entrada
		!!	9) usuario 1
		!!	10) usuario 2
		!!
		!!	@returns {integer} Código numérico del estilo de texto utilizado
		!!		actualmente. 0 por defecto
		!!	@dependency textStyles.h
		!!	@version 2025/05/18
		!!----------------------------------------------------------------------
		get_text_style [;
			return _current_text_style;
		],

		!!--------------------------------------------------------------------------
		!! Indica si la reproducción de audio está habilitada o no.
		!!
		!!	@returns {boolean} Verdadero si la reproducción de audio está
		!!		habilitada. Falso en caso contrario
		!!	@dependency ifjs.js
		!!	@dependency vorple.h
		!!	@version 2025/05/18
		!!--------------------------------------------------------------------------
		is_audio_enabled [;
			!! TODO
			return false;
		],

		!!--------------------------------------------------------------------------
		!! Define la función dada como `callback` a ejecutar cuando el usuario
		!! pulse la tecla INTRO. Para reconocer la entrada del usuario y
		!! ejecutar el `callback` es necesario añadir lógica adicional en las 
		!! siguientes funciones:
		!!
		!! <>	`baronLangLM.Miscellany#10`: captura la entrada de una línea en
		!!		blanco y ejecuta el `callback`, interrumpiendo el flujo
		!!		ordinario.
		!! <>	`BeforeParsing`: captura cualquier comando conocido y lo trata
		!!		como un sinónimo de pulsación de INTRO, interrumpiendo el flujo 
		!!		ordinario de la aplicación.
		!! <>	`MyVorplePrompt`: cambia el inductor para indicar al usuario que
		!!		la historia ha quedado a la espera de una pulsación de INTRO para
		!!		continuar.
		!! <>	`UnknownVerb`: captura cualquier comando desconocido y lo trata
		!!		como un sinónimo de pulsación de INTRO, en lugar a través de la
		!!		gestión de errores ordinaria.
		!!
		!! Además se introduce una línea de gramática para la nueva acción
		!! `pressAnyKey.verb`.
		!!
		!!	@returns {boolean} Verdadero
		!!	@dependency ifjs.js
		!!	@dependency vorple.h
		!!	@version 2025/05/18
		!!--------------------------------------------------------------------------
		press_intro_to_continue [ callback;
			self.on_press_intro = callback;
			
			VorpleExecuteJavaScriptCommand(BuildCommand("
				ifjs.saveHistoryLength();
			"));

			return true;
		],
		on_press_intro 0,

		!!----------------------------------------------------------------------
		!! Imprime una regla horizontal a modo de separador.
		!!
		!!	@returns {boolean} Verdadero
		!!	@dependency ifjs.js
		!!	@dependency vorple.h
		!!	@version 2025/05/18
		!!----------------------------------------------------------------------
		print_horizontal_rule [;
			VorpleExecuteJavaScriptCommand(BuildCommand("
				ifjs.printHorizontalRule();
			"));
			new_line;
			return true;
		],

		!!--------------------------------------------------------------------------
		!! Si es compilación para Vorple, simula el evento de haber dejado de 
		!! pulsar una de las teclas configuradas para resaltar palabras clave, 
		!! de modo que se asegura que después de ejecutar una acción las 
		!! palabras clave no están resaltadas.
		!!
		!!	@returns {boolean} Verdadero
		!!	@dependency ifjs.js
		!!	@dependency vorple.h
		!!	@version 2025/05/18
		!!--------------------------------------------------------------------------
		reset_highlights [;
			VorpleExecuteJavaScriptCommand(BuildCommand("
				ifjs.resetHighlights();
			"));
			return true;
		],

		!!----------------------------------------------------------------------
		!! Establece el valor de la flexión gramatical utilizada por la obra.
		!!
		!!	@param {integer} new_grammatical_inflection - Código de la nueva
		!!		flexión gramatical [1-9]
		!!	@returns {integer} Código de la flexión gramatical reemplazada
		!!	@dependency SpanishLM.h
		!!	@version 2025/05/18
		!!----------------------------------------------------------------------
		set_grammatical_inflection [ new_grammatical_inflection
			result;
			result = _grammatical_inflection;
			SetGrammaticalInflection(new_grammatical_inflection);
			return result;
		],

		!!----------------------------------------------------------------------
		!! Establece el estilo de texto utilizado por la obra.
		!!
		!!	@param {integer} style - Código numérico [1-10] del nuevo estilo
		!!		de texto
		!!	@returns {integer} Código numérico del estilo de texto reemplazado
		!!	@dependency textStyles.h
		!!	@version 2025/05/18
		!!----------------------------------------------------------------------
		set_text_style [ style;
			return SetTextStyle(style);
		],

		!! TODO - doc
		end_history [;
			VorpleExecuteJavaScriptCommand("vorple.prompt.hide()");
			quit;
		],
		

		!!----------------------------------------------------------------------
		!! Comprueba si un objeto contenedor/soporte 'obj' tiene capacidad
		!! suficiente para contener un segundo objeto 'second', pasados ambos
		!! como parámetro.
		!!
		!!	@param {Object} obj - Objeto contenedor/soporte
		!!	@param {Object} second - Objeto que se comprueba si puede ser
		!!		contenido en 'obj'
		!!	@returns {integer} Código con el resultado de la comprobación:
		!!		0) si no se usa la extensión 'capacities.h'
		!!		1) 'obj' tiene capacidad para albergar a 'second'
		!!		-1) se supera la cantidad máxima de objs. que puede tener 'obj'
		!!		-2) se supera la capacidad de tamaño máximo de 'obj'
		!!		-3) se supera la capacidad de volumen máximo de 'obj'
		!!		-4) el volumen agregado supera la capacidad máxima de 'obj'
		!!		-5) se supera la capacidad de peso máximo de 'obj'
		!!		-6) el peso agregado supera la capacidad máxima de 'obj'
		!!	@dependency capacities.h
		!!	@version 1.0 - 2019/07/15
		!!----------------------------------------------------------------------
		check_object_capacity [ obj second;
			!! Rutina definida por la extensión 'capacities.h':
			return CheckIfObjectFits(obj, second);
		],
		!!----------------------------------------------------------------------
		!! Crea un hipervínculo en Vorple.
		!! FIXME doc?
		!!----------------------------------------------------------------------
		create_vorple_hyperlink [ item alternative;
			if (isVorpleSupported()) {
				bp_output_stream(3, _hyperlinks_utility_array_a, LEN_HUGEHUGESTR);
				self.print_object_short_name(item);
				bp_output_stream(-3);
				if (alternative) {
					VorpleLinkCommandText(_hyperlinks_utility_array_a, alternative);
				} else {
					VorpleLinkCommand(_hyperlinks_utility_array_a);
				}
			} else {
				if (alternative) print (string) alternative;
				else self.print_object_short_name(item);
			}
			return true;
		],
		!!----------------------------------------------------------------------
		!! Retorna el código numérico del estilo de texto de las palabras
		!! destacadas para el tipo de objeto con el código pasado como
		!! parámetro.
		!!
		!!	@param {integer} object_type - Código numérico del tipo de objeto
		!!		para el que se pretende conocer el estilo de texto resaltado
		!!	@returns {integer} Código numérico del estilo de texto resaltado
		!!		para los objetos de tipo 'object_type'. -1 por defecto
		!!	@version 1.0 - 2019/09/14
		!!----------------------------------------------------------------------
		get_highlight_style [ object_type
			result;
			result = -1; ! (por defecto)
			if (((object_type-1) >= 0)
				&& ((object_type-1) < (self.#highlight_styles)/WORDSIZE)) {
				result = self.&highlight_styles-->(object_type-1);
			}
			return result;
		],
		!!----------------------------------------------------------------------
		!! Retorna el estado (si están o no activados) de los hipervínculos
		!! para el tipo de objeto con el código pasado como parámetro.
		!!
		!!	@param {integer} object_type - Código numérico del tipo de objeto
		!!		para el que se pretende conocer el estado de los hipervínculos
		!!	@returns {boolean} Verdadero si los hipervínculos para los objetos
		!!		de tipo 'object_type' están activados. Falso en caso contrario
		!!	@version 1.1
		!!----------------------------------------------------------------------
		get_hyperlinks_status [ object_type
			result;
			result = false; ! (por defecto)
			if (((object_type-1) >= 0)
				&& ((object_type-1) < (self.#hyperlinks_status)/WORDSIZE)) {
				result = self.&hyperlinks_status-->(object_type-1);
			}
			return result;
		],
		!!----------------------------------------------------------------------
		!! Dado un objeto como parámetro retorna su antecesor más lejano en el
		!! árbol de objetos del modelo de mundo.
		!!
		!!	@param {Object} obj - Objeto del que se desea averiguar su
		!!		antecesor más lejano
		!!	@returns {Object} Antecesor más lejano de 'obj'
		!!	@version 1.0 - 2019/09/14
		!!----------------------------------------------------------------------
		get_top_holder [ obj
			aux;
			while (parent(obj) ~= 0) {
				aux = ObjectScopedBySomething(obj);
				if (aux == 0) aux = parent(obj);
				obj = aux;
			}
			return obj;
		],
		!!----------------------------------------------------------------------
		!! Rutina encargada de hacer las inicializaciones oportunas al ejecutar
		!! la obra sobre la máquina virtual GLULX: incializar la librería
		!! Vorple, activar la escucha de hipervínculos, inicializar los
		!! recursos multimedia...
		!!
		!!	@returns {boolean} Verdadero
		!!	@version 2025/05/18
		!!----------------------------------------------------------------------
		initialise_glulx [;
			!! Inicializaciones de Vorple:
			VorpleInitialise();

			!! Comprueba el soporte para la librería Vorple del intérprete:
			!! XXX - La comprobación sólo es efectiva si previamente se ha
			!! invocado "VorpleInitialise()"
			if (~~isVorpleSupported()) {
				new_line;
				print (strong) "ERROR", "^";
				new_line;
				print "Tu intérprete actual no soporta la ejecución de código JavaScript. Para iniciar la historia es necesario utilizar un intérprete que sí lo soporte ^";
				new_line;
				new_line;
				self.end_history();
			}

			return true;
		],
		!!----------------------------------------------------------------------
		!! Indica si se utilizan o no los puntos cardinales como sistema de
		!! navegación.
		!!
		!!	@returns Verdadero si la navegación se realiza a través de los
		!!		puntos cardinales. Falso en caso contrario
		!!	@version 1.0 - 2019/09/14
		!!----------------------------------------------------------------------
		is_compass_enabled [;
			return self.compass_mode;
		],

		!! XXX
		!!----------------------------------------------------------------------
		!!----------------------------------------------------------------------
		print_temporal_prompt [
			previous_style;
			if (metaclass(self._prompt) == String) {
				previous_style = Utils.set_text_style(TEXT_STYLE_PARSER);
				print (string) TEXT_STYLE_PARSER_PREFIX;
				print (string) self._prompt;
				print (string) TEXT_STYLE_PARSER_SUFIX;
				Utils.set_text_style(previous_style);
				print " ";
				self._prompt = false;
				return true;
			}
		],
		set_temporal_prompt [ text;
			self._prompt = text;
		],
		!! XXX

		!!----------------------------------------------------------------------
		!! Imprime el pronombre nominativo correcto correspondiente al objeto
		!! pasado como parámetro.
		!!
		!!	@param {Object} obj - Objeto del que se pretende imprimir su
		!!		pronombre nominativo
		!!	@param {boolean} [capitalized=false] - Si es verdadero, imprime el
		!!		pronombre con la primera letra en mayúscula
		!!	@returns {boolean} Falso si el objeto pasado como parámetro no es
		!!		un objeto. Verdadero en caso contrario
		!!	@version 1.0 - 2020/01/27
		!!----------------------------------------------------------------------
		print_spanish_nominative_pronoun [ obj capitalized;
			if (metaclass(obj) == Object) {
				switch (GetGNAOfObject(obj)) {
					0, 6:
						if (capitalized) print "Él";
						else print "él";
					1, 7:
						if (capitalized) print "Ella";
						else print "ella";
					2, 8:
						if (capitalized) print "Ello";
						else print "ello";
					3, 9:
						if (capitalized) print "Ellos";
						else print "ellos";
					4, 10:
						if (capitalized) print "Ellas";
						else print "ellas";
					5, 11:
						if (capitalized) print "Ellos";
						else print "ellos";
				}
				return true;
			}
			return false;
		],
		!!----------------------------------------------------------------------
		!! Reestablece el modelo del mundo a su estado inicial.
		!!
		!!	@returns {boolean} Verdadero
		!!	@version 1.0 - 2019/10/31
		!!----------------------------------------------------------------------
		restart [
			obj;
			objectloop(obj ofclass Thing) {
				give obj ~described;
				give obj ~general;
				give obj ~moved;
				obj.state = 0;
			}
			objectloop(obj ofclass Room) {
				give obj ~general;
				give obj ~visited;
			}
			return true;
		],
		!!----------------------------------------------------------------------
		!! Establece el modo de navegación.
		!!
		!!	@param {boolean} mode - Indica si la navegación se lleva a cabo a
		!!		través de la brújula (si 'mode' es verdadero) o no (si 'mode'
		!!		es falso)
		!!	@returns {boolean} Modo de navegación reemplazado
		!!	@version 1.0 - 2019/09/14
		!!----------------------------------------------------------------------
		set_compass_mode [ mode
			result;
			result = self.compass_mode;
			self.compass_mode = mode;
			return result;
		],
		!!----------------------------------------------------------------------
		!! Establece el estilo de texto de las palabras destacadas para el
		!! tipo de objeto pasado como parámetro.
		!!
		!! El sistema de palabras destacadas es dependiente del sistema de
		!! hipervínculos, de manera que los estilos disponibles en un momento
		!! dado dependen del estado de los hipervínculos para ese tipo de
		!! objeto. Si se intenta establecer un estilo de texto que no es
		!! compatible con el estado de los hipervínculos, la rutina asigna
		!! automáticamente el siguiente estilo disponible.
		!!
		!!	@param {integer} object_type - Código numérico del tipo de objeto
		!!		para el que se pretende modificar el estilo de texto resaltado
		!!	@param {integer} text_style - Código numérico del nuevo estilo de
		!!		texto resaltado que se asigna al tipo de objeto 'object_type'
		!!	@returns {integer} Código numérico del estilo de texto resaltado
		!!		que se había estado utilizando previamente para los objetos del
		!!		tipo 'object_type'. -1 si 'object_type' no es un código válido
		!!	@version 1.0 - 2019/06/24
		!!----------------------------------------------------------------------
		set_highlight_style [ object_type text_style
			result status;
			!! Inicializaciones del método:
			if (object_type < 1 || object_type > 4) {
				return -1;
			}
			result = self.get_highlight_style(object_type);
			status = self.get_hyperlinks_status(object_type);
			!! Modifica el estilo de texto en función del estado calculado:
			if (text_style == TEXT_STYLE_NOTE or TEXT_STYLE_QUOTE
				&& status) {
				!! FIXME
				!! text_style = TEXT_STYLE_USER1;
			}
			!! Establece el estilo de texto y retorna el estilo previo:
			if ((object_type-1) < (self.#highlight_styles)/WORDSIZE) {
				self.&highlight_styles-->(object_type-1) = text_style;
			}
			return result;
		],
		!!----------------------------------------------------------------------
		!! Establece el estado de los hipervínculos para el tipo de objeto
		!! pasado como parámetro.
		!!
		!!	@param {integer} object_type - Código numérico del tipo de objeto
		!!		para el que se pretende modificar el estado de los
		!!		hipervínculos
		!!	@param {boolean} status - Estado (activado/desactivado) que se
		!!		asigna a los hipervínculos asociados al tipo de objeto
		!!		'object_type'
		!!	@returns {boolean} Estado de los hipervínculos que estaba
		!!		establecido previamente para los objetos de tipo 'object_type'
		!!	@version 1.0
		!!----------------------------------------------------------------------
		set_hyperlinks_status [ object_type status
			result highlight;
			!! Establece el estado de los hipervínculos para 'object_type':
			result = self.get_hyperlinks_status(object_type);
			if ((object_type-1) < (self.#hyperlinks_status)/WORDSIZE) {
				self.&hyperlinks_status-->(object_type-1) = status;
			}
			!! Actualiza el estilo de texto resaltado:
			highlight = self.get_highlight_style(object_type);
			self.set_highlight_style(object_type, highlight);
			!! Retorna el estado previo:
			return result;
		],
		!!----------------------------------------------------------------------
		!!	@param {number} num - Nueva escena
		!!	@returns {boolean} Verdadero
		!!	@version 1.0 - 2020/01/27
		!!----------------------------------------------------------------------
		start_scene [ num;
			switch (num) {
				3:
					PlayerTo(Bosque);
					return true;
				4:
					PlayerTo(EntradaCastillo);
					return true;
				5:
					PlayerTo(PatioArmas);
					return true;
			}
		],
		!!----------------------------------------------------------------------
		!! Imprime una dirección web.
		!!
		!!	@param {string} website - Dirección web
		!!	@returns {boolean} Verdadero
		!!	@version 1.0
		!!----------------------------------------------------------------------
		website_hyperlink [ txt;
			if (isVorpleSupported()) VorpleLinkWebsiteText(txt, txt);
			else print (stressed) txt;
			return true;
		],
 private
		!!----------------------------------------------------------------------
		!! ATRIBUTOS PRIVADOS
		!!----------------------------------------------------------------------
		!! Navegación a través de los puntos cardinales:
		compass_mode false,
		!! Escena actual
		current_scene 0,
		!! Estilos de texto resaltado:
		highlight_styles 0 0 0 0,
		!! Estados de los hipervínculos:
		hyperlinks_status 0 0 0 0,
		!! Inductor personalizado:
		_prompt false,
		!!----------------------------------------------------------------------
		!! MÉTODOS PRIVADOS
		!!----------------------------------------------------------------------
		!! Imprime el nombre corto de un objeto/una cadena de caracteres dada:
		print_object_short_name [ obj;
			if (metaclass(obj) == String) {
				print (string) obj;
				jump shortNamePrinted;
			}
			#Ifdef LanguagePrintShortName;
			if (LanguagePrintShortName(obj)) {
				jump shortNamePrinted;
			}
			#Endif; ! LanguagePrintShortName;
			if (indef_mode && obj.&short_name_indef ~= 0
				&& PrintOrRun(obj, short_name_indef, 1) ~= 0) {
				jump shortNamePrinted;
			}
			if (obj.&short_name ~= 0 && PrintOrRun(obj, short_name, 1) ~= 0) {
				jump shortNamePrinted;
			}
			print (object) obj;
			.shortNamePrinted;
			return true;
		],
;
